<!DOCTYPE html>
<html lang="vi" class="dark">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Xưởng Truyện AI 9.0</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Be+Vietnam+Pro:wght@400;500;700;800&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script>
        // Tailwind CSS configuration
        tailwind.config = {
            darkMode: 'class',
            theme: {
                extend: {
                    fontFamily: {
                        sans: ['Be Vietnam Pro', 'sans-serif'],
                    },
                    colors: {
                        'primary': '#101010', 
                        'secondary': '#181818', 
                        'tertiary': '#282828', 
                        'text-main': '#E5E7EB', 
                        'text-secondary': '#A1A1AA', 
                        'accent': {
                            'pink': '#F43F5E',
                            'blue': '#3B82F6',
                            'green': '#22C55E',
                            'yellow': '#EAB308',
                            'purple': '#8B5CF6',
                        },
                        'danger': '#EF4444',
                    },
                }
            }
        }
    </script>
    <style>
        body { -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; }
        ::-webkit-scrollbar { width: 8px; }
        ::-webkit-scrollbar-track { background: #181818; }
        ::-webkit-scrollbar-thumb { background: #282828; border-radius: 4px; }
        ::-webkit-scrollbar-thumb:hover { background: #3f3f46; }
        
        #sidebar { transition: transform 0.3s ease-in-out, width 0.3s ease-in-out; }
        .sidebar-overlay { transition: opacity 0.3s ease-in-out; }

        [contenteditable]:focus { outline: 2px solid #3B82F6; }
        
        .loader { border: 4px solid #282828; border-top: 4px solid #F43F5E; border-radius: 50%; width: 48px; height: 48px; animation: spin 1s linear infinite; }
        @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
        
        .speaking-highlight { background-color: rgba(59, 130, 246, 0.2); border-radius: 4px; transition: background-color 0.3s; }
        .chapter-item.selected { background-color: #3B82F6; color: #FFFFFF; }
        .chapter-item.selected .text-text-secondary { color: #E5E7EB; }
        .chapter-item { transition: background-color 0.2s ease-in-out; }

        .fab { box-shadow: 0 10px 15px -3px rgba(244, 63, 94, 0.3), 0 4px 6px -2px rgba(244, 63, 94, 0.2); transition: transform 0.2s ease, background-color 0.2s ease; }
        .fab:active { transform: scale(0.95); }
        
        #app-container.focus-mode #sidebar { width: 0; padding: 0; overflow: hidden; border-right: none; }
        #app-container.focus-mode { grid-template-columns: 0 1fr; }
        #app-container.focus-mode #menu-toggle-btn, #app-container.focus-mode #generate-chapter-btn { display: none; }
        
        .input-label { display: block; font-weight: 500; color: #A1A1AA; margin-bottom: 4px; font-size: 0.875rem; }
        .tag-btn { background-color: #282828; border: 1px solid #3f3f46; transition: all 0.2s ease; }
        .tag-btn:hover { background-color: #3f3f46; border-color: #52525b; }
        .tag-btn.active { background-color: #3B82F6; color: #FFFFFF; border-color: #3B82F6; }
        
        .tab-button { transition: all 0.2s ease; border-bottom: 2px solid transparent; }
        .tab-button.active { color: #3B82F6; border-bottom-color: #3B82F6; }
        .tab-content { display: none; animation: fadeIn 0.5s; }
        .tab-content.active { display: block; }

        @keyframes fadeIn { from { opacity: 0; transform: translateY(5px); } to { opacity: 1; transform: translateY(0); } }
        
        .skeleton-loader { background-color: #282828; border-radius: 0.5rem; animation: pulse 1.5s cubic-bezier(0.4, 0, 0.6, 1) infinite; }
        @keyframes pulse { 0%, 100% { opacity: 1; } 50% { opacity: .5; } }
    </style>
</head>
<body class="bg-primary text-text-main font-sans">

    <div id="app-container" class="relative min-h-screen lg:grid lg:grid-cols-[380px_1fr] transition-all duration-300">
        
        <div id="sidebar-overlay" class="lg:hidden fixed inset-0 bg-black/50 z-30 opacity-0 pointer-events-none"></div>

        <button id="menu-toggle-btn" class="lg:hidden fixed top-4 left-4 z-40 p-2 bg-secondary/80 backdrop-blur-sm border border-tertiary rounded-lg">
            <i class="fa-solid fa-bars w-6 h-6 flex items-center justify-center text-xl"></i>
        </button>

        <aside id="sidebar" class="fixed top-0 left-0 w-full max-w-[320px] sm:max-w-sm h-full bg-secondary z-40 transform -translate-x-full lg:relative lg:translate-x-0 lg:max-w-none flex flex-col border-r border-tertiary">
            <div class="flex items-center justify-between mb-4 flex-shrink-0 p-4 pb-0">
                 <h1 class="text-2xl font-bold text-white">Xưởng Truyện <span class="text-accent-pink">AI</span></h1>
                 <button id="close-menu-btn" class="lg:hidden text-text-secondary hover:text-white">
                    <i class="fa-solid fa-times text-2xl"></i>
                 </button>
            </div>
            
            <div class="overflow-y-auto flex-grow pr-2 pl-4 space-y-6">
                
                <section>
                    <div class="flex justify-between items-center mb-3 mt-4">
                        <h2 class="text-sm font-semibold uppercase text-text-secondary tracking-wider">Cài Đặt Truyện</h2>
                        <span id="saving-indicator" class="text-xs text-accent-yellow opacity-0 transition-opacity">Đang lưu...</span>
                    </div>
                    
                    <div class="border-b border-tertiary mb-4">
                        <nav id="settings-tabs" class="flex space-x-4" aria-label="Tabs">
                            <button class="tab-button py-2 px-1 text-sm font-medium text-text-secondary hover:text-white" data-tab="basic">CƠ BẢN</button>
                            <button class="tab-button py-2 px-1 text-sm font-medium text-text-secondary hover:text-white" data-tab="world">THẾ GIỚI</button>
                            <button class="tab-button py-2 px-1 text-sm font-medium text-text-secondary hover:text-white" data-tab="plot">CỐT TRUYỆN</button>
                            <button class="tab-button py-2 px-1 text-sm font-medium text-text-secondary hover:text-white" data-tab="advanced">NÂNG CAO</button>
                        </nav>
                    </div>

                    <div id="settings-tab-content">
                        <!-- Tab 1: CƠ BẢN -->
                        <div id="tab-content-basic" class="tab-content space-y-4">
                            <div>
                                <label class="input-label">1. Thể loại - Bối cảnh - Lưu phái</label>
                                <div class="p-3 bg-primary border border-tertiary rounded-md space-y-3">
                                    <input type="text" id="display-genre" readonly class="w-full p-2 bg-secondary border border-tertiary rounded-md text-sm" placeholder="Chọn thể loại sáng tác">
                                    <div id="tags-genre" class="flex flex-wrap gap-2"></div>
                                    <input type="text" id="display-world" readonly class="w-full p-2 mt-1 bg-secondary border border-tertiary rounded-md text-sm" placeholder="Chọn bối cảnh sáng tác">
                                    <div id="tags-world" class="flex flex-wrap gap-2"></div>
                                    <input type="text" id="display-trope" readonly class="w-full p-2 mt-1 bg-secondary border border-tertiary rounded-md text-sm" placeholder="Chọn lưu phái / tình tiết">
                                    <div id="tags-trope" class="flex flex-wrap gap-2"></div>
                                </div>
                            </div>
                            <div><label class="input-label">2. Ý tưởng cốt lõi</label><textarea id="setting-step0CoreIdea" rows="3" class="w-full p-2 bg-primary border border-tertiary rounded-md text-sm" placeholder="Tóm tắt độc đáo nhất về truyện, càng dị càng tốt. (Ví dụ: Tu tiên trong thế giới cyberpunk, Nhân vật chính là một cái xác sống…)"></textarea></div>
                            <div><label class="input-label">3. Chủ đề & Triết lý</label><textarea id="setting-step0Theme" rows="3" class="w-full p-2 bg-primary border border-tertiary rounded-md text-sm" placeholder="Thông điệp hoặc tư tưởng sâu sắc mà truyện muốn truyền tải. (Ví dụ: Cô độc trên đỉnh cao, Đấu tranh giữa tự do và định mệnh…)"></textarea></div>
                            <div><label class="input-label">4. Nhân vật chính - Tên và Xuất thân</label><textarea id="setting-step1McOrigin" rows="2" class="w-full p-2 bg-primary border border-tertiary rounded-md text-sm" placeholder="Ví dụ: Lâm Phong – Phế vật bị hủy đan điền, bị từ hôn, sống ở tiểu quốc"></textarea></div>
                            <div><label class="input-label">5. Tính cách nhân vật</label><textarea id="setting-step1McPersonality" rows="2" class="w-full p-2 bg-primary border border-tertiary rounded-md text-sm" placeholder="Tóm tắt vài nét cốt lõi: (Ví dụ: Cẩn trọng, Lạnh lùng, Hài hước...)"></textarea></div>
                            <div><label class="input-label">6. Sở thích, hành vi đặc trưng</label><textarea id="setting-step1McHobbies" rows="2" class="w-full p-2 bg-primary border border-tertiary rounded-md text-sm" placeholder="Ví dụ: Thích uống trà, Trêu chọc người khác, Hay đọc sách cổ"></textarea></div>
                            <div><label class="input-label">7. Mục tiêu cuối cùng</label><textarea id="setting-step1McGoal" rows="2" class="w-full p-2 bg-primary border border-tertiary rounded-md text-sm" placeholder="Ví dụ: Trường sinh, Báo thù, Xây dựng tông môn riêng..."></textarea></div>
                            <div><label class="input-label">8. Bàn tay vàng (lợi thế đặc biệt)</label><textarea id="setting-step1McAdvantage" rows="2" class="w-full p-2 bg-primary border border-tertiary rounded-md text-sm" placeholder="Ví dụ: Hệ thống trong đầu, Trùng sinh về quá khứ, Có thể nhìn thấy tương lai"></textarea></div>
                            <div><label class="input-label">9. Khuyết điểm hoặc cái giá của bàn tay vàng (nếu có)</label><textarea id="setting-step1McAdvantageFlaw" rows="2" class="w-full p-2 bg-primary border border-tertiary rounded-md text-sm" placeholder="Ví dụ: Mỗi lần dùng là mất ký ức, Phải hấp thu sinh mệnh người khác..."></textarea></div>
                        </div>

                        <!-- Tab 2: THẾ GIỚI -->
                        <div id="tab-content-world" class="tab-content space-y-4">
                            <div><label class="input-label">1. Cảnh giới tu luyện</label><textarea id="setting-step1Realms" rows="2" class="w-full p-2 bg-primary border border-tertiary rounded-md text-sm" placeholder="Liệt kê theo thứ tự: (Ví dụ: Luyện Khí → Trúc Cơ → Kim Đan → ...)"></textarea></div>
                            <div><label class="input-label">2. Nguồn năng lượng chính</label><textarea id="setting-step1EnergySource" rows="2" class="w-full p-2 bg-primary border border-tertiary rounded-md text-sm" placeholder="Ví dụ: Linh khí, Ma khí, Nguyên tố, Tín ngưỡng lực…"></textarea></div>
                            <div><label class="input-label">3. Điều kiện đột phá</label><textarea id="setting-step1Breakthrough" rows="2" class="w-full p-2 bg-primary border border-tertiary rounded-md text-sm" placeholder="Ví dụ: Lĩnh ngộ đạo lý, Vượt Thiên Kiếp, Kết đan thành công…"></textarea></div>
                            <div><label class="input-label">4. Thiên phú và thể chất</label><textarea id="setting-step2Talent" rows="2" class="w-full p-2 bg-primary border border-tertiary rounded-md text-sm" placeholder="Ví dụ: Linh căn ngũ hành, Hỗn Độn Thể, Dị đồng, Âm Dương Thể..."></textarea></div>
                            <div><label class="input-label">5. Công pháp, kỹ năng, pháp bảo</label><textarea id="setting-step2Methods" rows="2" class="w-full p-2 bg-primary border border-tertiary rounded-md text-sm" placeholder="Liệt kê hệ thống kỹ năng: (tu luyện – chiến đấu – phụ trợ)"></textarea></div>
                            <div><label class="input-label">6. Trở ngại tu luyện</label><textarea id="setting-step2Challenges" rows="2" class="w-full p-2 bg-primary border border-tertiary rounded-md text-sm" placeholder="Ví dụ: Tâm ma, Thiên kiếp, Tẩu hỏa nhập ma, Quy tắc thiên đạo…"></textarea></div>
                            <div><label class="input-label">7. Lịch sử - Truyền thuyết nổi bật</label><textarea id="setting-step2History" rows="2" class="w-full p-2 bg-primary border border-tertiary rounded-md text-sm" placeholder="Các sự kiện quan trọng trong quá khứ, có ảnh hưởng lớn đến hiện tại."></textarea></div>
                            <div><label class="input-label">8. Địa lý – Vị diện – Không gian</label><textarea id="setting-step2Geography" rows="2" class="w-full p-2 bg-primary border border-tertiary rounded-md text-sm" placeholder="Miêu tả bố cục thế giới: (Ví dụ: Hạ giới – Trung giới – Thượng giới…)"></textarea></div>
                            <div><label class="input-label">9. Quy luật thế giới / Thiên đạo</label><textarea id="setting-step2WorldRules" rows="2" class="w-full p-2 bg-primary border border-tertiary rounded-md text-sm" placeholder="Ví dụ: Nhân quả rõ ràng, Vạn vật hữu linh, Cấm kỵ nghịch thiên"></textarea></div>
                            <div><label class="input-label">10. Thế lực và tổ chức</label><textarea id="setting-step2Factions" rows="2" class="w-full p-2 bg-primary border border-tertiary rounded-md text-sm" placeholder="Ví dụ: Huyền Thiên Tông, Ma Thần Cung, Đạo Minh Liên Minh…"></textarea></div>
                            <div><label class="input-label">11. Chủng tộc và sinh vật</label><textarea id="setting-step2Races" rows="2" class="w-full p-2 bg-primary border border-tertiary rounded-md text-sm" placeholder="Ví dụ: Nhân tộc, Yêu tộc, Linh thú, Ma vật, Dị tộc…"></textarea></div>
                            <div><label class="input-label">12. Kinh tế và tiền tệ</label><textarea id="setting-step2Economy" rows="2" class="w-full p-2 bg-primary border border-tertiary rounded-md text-sm" placeholder="Ví dụ: Dùng linh thạch làm tiền, Có đấu giá hội, Có thương hội..."></textarea></div>
                            <div><label class="input-label">13. Nghề nghiệp phụ trợ</label><textarea id="setting-step2Professions" rows="2" class="w-full p-2 bg-primary border border-tertiary rounded-md text-sm" placeholder="Ví dụ: Luyện đan, Luyện khí, Trận pháp, Khôi lỗi, Dịch trận..."></textarea></div>
                            <div><label class="input-label">14. Hạ tầng xã hội</label><textarea id="setting-step2Infrastructure" rows="2" class="w-full p-2 bg-primary border border-tertiary rounded-md text-sm" placeholder="Ví dụ: Truyền tống trận, Linh xa, Phi hạm, Thành trì nổi trên không..."></textarea></div>
                        </div>

                        <!-- Tab 3: CỐT TRUYỆN -->
                        <div id="tab-content-plot" class="tab-content space-y-4">
                            <div><label class="input-label">1. Cấu trúc cốt truyện</label><textarea id="setting-step3Structure" rows="2" class="w-full p-2 bg-primary border border-tertiary rounded-md text-sm" placeholder="Ví dụ: Chia theo Arc lớn, Leo dần theo các bản đồ, Trùng sinh nghịch thiên…"></textarea></div>
                            <div><label class="input-label">2. Kỹ thuật gây nghiện</label><textarea id="setting-step3Techniques" rows="2" class="w-full p-2 bg-primary border border-tertiary rounded-md text-sm" placeholder="Ví dụ: Treo tình tiết, Tạo sảng điểm, Nhịp điệu chặt-chùng-căng…"></textarea></div>
                            <div><label class="input-label">3. Phong cách và tông màu</label><textarea id="setting-styleTone" rows="2" class="w-full p-2 bg-primary border border-tertiary rounded-md text-sm" placeholder="Ví dụ: Tăm tối và khốc liệt, Hài hước châm biếm, Huyền bí ma mị…"></textarea></div>
                            <div>
                                <label class="input-label">4. Góc nhìn kể chuyện</label>
                                <select id="setting-pov" class="w-full p-2 bg-primary border border-tertiary rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-accent-blue">
                                    <option value="third_person_limited">Ngôi thứ ba hạn tri (khuyên dùng)</option>
                                    <option value="third_person_omniscient">Ngôi thứ ba toàn tri</option>
                                    <option value="first_person">Ngôi thứ nhất</option>
                                    <option value="rotating_pov">Góc nhìn luân phiên</option>
                                </select>
                            </div>
                            <div>
                                <label class="input-label">5. Văn phong tham chiếu (nếu có)</label>
                                <textarea id="setting-learnedStory" rows="8" class="w-full p-2 bg-primary border border-tertiary rounded-md text-sm" placeholder="Bạn có thể dán đoạn văn mẫu hoặc tên tác giả muốn bắt chước."></textarea>
                                <input type="file" id="learned-story-file-input" class="hidden" accept=".txt">
                                <button id="upload-learned-story-btn" class="w-full mt-2 bg-accent-purple/20 text-accent-purple p-2 rounded-md hover:bg-accent-purple/30 flex items-center justify-center gap-2 transition-colors">
                                    <i class="fa-solid fa-upload"></i> Tải lên file .txt
                                </button>
                            </div>
                        </div>

                        <!-- Tab 4: NÂNG CAO -->
                        <div id="tab-content-advanced" class="tab-content space-y-4">
                            <div><label class="input-label">1. Xung đột nền tảng</label><textarea id="setting-step0Conflict" rows="2" class="w-full p-2 bg-primary border border-tertiary rounded-md text-sm" placeholder="Mâu thuẫn sâu xa nhất của truyện: (Ví dụ: Số phận vs Tự do ý chí…)"></textarea></div>
                            <div><label class="input-label">2. Cái giá phải trả</label><textarea id="setting-step0Price" rows="2" class="w-full p-2 bg-primary border border-tertiary rounded-md text-sm" placeholder="Ví dụ: Mất đi cảm xúc, Tu luyện khiến thân thể bị ăn mòn..."></textarea></div>
                            <div><label class="input-label">3. Bí ẩn và yếu tố vĩ mô</label><textarea id="setting-step4Mystery" rows="2" class="w-full p-2 bg-primary border border-tertiary rounded-md text-sm" placeholder="Ví dụ: Bí mật của thế giới, Ý chí thiên đạo có thật không…"></textarea></div>
                            <div><label class="input-label">4. Dị tượng – Quy tắc lạ</label><textarea id="setting-step4Anomalies" rows="2" class="w-full p-2 bg-primary border border-tertiary rounded-md text-sm" placeholder="Ví dụ: Thời gian chảy ngược ở một vùng, Không gian lặp vô tận…"></textarea></div>
                            <div><label class="input-label">5. Tàn tích – Đồ cổ xưa</label><textarea id="setting-step4Remnants" rows="2" class="w-full p-2 bg-primary border border-tertiary rounded-md text-sm" placeholder="Ví dụ: Bí cảnh thời Thượng Cổ, Linh hồn cường giả ngủ say..."></textarea></div>
                            <div><label class="input-label">6. Chi tiết đời thường để tạo chiều sâu</label><textarea id="setting-step5Details" rows="2" class="w-full p-2 bg-primary border border-tertiary rounded-md text-sm" placeholder="Ví dụ: Ẩm thực tu chân, Lễ hội linh khí, Tín ngưỡng địa phương…"></textarea></div>
                            <div><label class="input-label">7. Tình huống "Nếu... thì sao?" để tạo kịch tính</label><textarea id="setting-step5InternalConflicts" rows="2" class="w-full p-2 bg-primary border border-tertiary rounded-md text-sm" placeholder="Ví dụ: Nếu Ma đạo thống trị thì Tiên đạo có bị tận diệt?"></textarea></div>
                            <div><label class="input-label">8. Góc nhìn đa chiều – Lịch sử thay đổi tùy người kể</label><textarea id="setting-step5Perspectives" rows="2" class="w-full p-2 bg-primary border border-tertiary rounded-md text-sm" placeholder="Gợi ý cách dùng nhiều nhân vật để kể lại cùng một sự kiện."></textarea></div>
                        </div>
                    </div>
                </section>

                <section>
                    <h2 class="text-sm font-semibold uppercase text-text-secondary tracking-wider mb-3">Công Cụ Audio</h2>
                     <div class="bg-primary border border-tertiary rounded-lg p-4 space-y-4">
                        <select id="voice-select" class="w-full bg-secondary border border-tertiary rounded-md p-2 text-sm focus:outline-none focus:ring-2 focus:ring-accent-blue disabled:opacity-50"></select>
                        <div>
                            <label for="speed-control" class="text-sm font-medium text-text-secondary">Tốc độ: <span id="speed-label">1.0x</span></label>
                            <input type="range" id="speed-control" min="0.5" max="2" value="1" step="0.1" class="w-full mt-1 accent-accent-pink disabled:opacity-50">
                        </div>
                        <div class="flex justify-center items-center space-x-4">
                            <button id="prev-track-btn" class="p-3 w-12 h-12 flex items-center justify-center bg-tertiary rounded-full hover:bg-tertiary/80 disabled:opacity-50 disabled:cursor-not-allowed transition-transform active:scale-95">
                                <i class="fa-solid fa-backward-step text-lg"></i>
                            </button>
                            <button id="play-pause-btn" class="p-3 w-16 h-16 flex items-center justify-center bg-accent-pink text-white rounded-full hover:bg-accent-pink/80 disabled:opacity-50 disabled:cursor-not-allowed text-2xl transition-transform active:scale-95">
                                <i id="play-icon" class="fa-solid fa-play"></i>
                                <i id="pause-icon" class="fa-solid fa-pause hidden"></i>
                            </button>
                            <button id="next-track-btn" class="p-3 w-12 h-12 flex items-center justify-center bg-tertiary rounded-full hover:bg-tertiary/80 disabled:opacity-50 disabled:cursor-not-allowed transition-transform active:scale-95">
                                <i class="fa-solid fa-forward-step text-lg"></i>
                            </button>
                        </div>
                        <p id="status-indicator" class="text-sm text-center text-text-secondary">Sẵn sàng</p>
                     </div>
                </section>

                <section>
                    <h2 class="text-sm font-semibold uppercase text-text-secondary tracking-wider mb-3">Quản Lý Dữ Liệu</h2>
                    <div class="space-y-3">
                        <div class="bg-primary border border-tertiary rounded-lg p-4 space-y-3">
                            <h3 class="font-semibold text-white">Lưu trữ & Xóa</h3>
                            <p class="text-sm text-text-secondary">Lưu trữ toàn bộ truyện về máy hoặc xóa dữ liệu không cần thiết.</p>
                             <div class="grid grid-cols-2 gap-2 text-sm">
                                <button id="export-json-btn" class="bg-accent-blue/20 text-accent-blue p-2 rounded-md hover:bg-accent-blue/30 flex items-center justify-center gap-2 transition-colors"><i class="fa-solid fa-download"></i> Xuất File</button>
                                <button id="import-json-btn" class="bg-tertiary hover:bg-tertiary/80 p-2 rounded-md flex items-center justify-center gap-2 transition-colors"><i class="fa-solid fa-upload"></i> Nhập File</button>
                                <button id="delete-chapter-btn" class="bg-danger/20 text-danger p-2 rounded-md hover:bg-danger/40 disabled:opacity-50 flex items-center justify-center gap-2 transition-colors"><i class="fa-solid fa-trash"></i> Xóa Chương</button>
                                <button id="delete-all-btn" class="bg-danger/20 text-danger p-2 rounded-md hover:bg-danger/40 disabled:opacity-50 flex items-center justify-center gap-2 transition-colors"><i class="fa-solid fa-fire"></i> Xóa Hết</button>
                            </div>
                        </div>
                    </div>
                </section>
            </div>
             <div class="p-4 pt-4 border-t border-tertiary text-xs text-text-secondary flex-shrink-0">
                <p id="auth-status">Đang kết nối...</p>
                <p id="user-id-display" class="truncate"></p>
            </div>
        </aside>

        <main class="flex-grow p-4 sm:p-6 lg:p-8 h-screen flex flex-col">
            <div id="main-view-grid" class="flex-grow grid grid-cols-1 md:grid-cols-2 gap-6 h-full overflow-hidden">
                <div class="bg-secondary rounded-xl p-4 sm:p-6 flex flex-col h-full overflow-hidden">
                    <div class="flex justify-between items-center mb-4">
                        <h2 class="text-xl font-bold text-white">Danh sách chương</h2>
                        <div class="flex items-center text-sm">
                            <label for="auto-gen-toggle" class="mr-2 text-text-secondary">Tự động:</label>
                            <button id="auto-gen-toggle" role="switch" aria-checked="false" class="relative inline-flex h-6 w-11 items-center rounded-full bg-tertiary transition-colors disabled:opacity-50">
                                <span class="inline-block h-4 w-4 transform rounded-full bg-white transition translate-x-1"></span>
                            </button>
                        </div>
                    </div>
                    <div id="chapter-list" class="flex-grow overflow-y-auto space-y-2 pr-2">
                        <!-- Chapter items will be rendered here -->
                    </div>
                    <div id="continuous-gen-notification" class="hidden text-sm text-center text-accent-green bg-accent-green/10 p-2 mt-2 rounded-md">AI đang tự động tạo chương mới...</div>
                </div>

                <div class="bg-secondary rounded-xl p-1 flex flex-col h-full overflow-hidden">
                    <div class="p-3 sm:p-5 border-b border-tertiary flex justify-between items-center flex-shrink-0">
                         <h3 id="chapter-title-display" class="text-lg font-semibold text-accent-blue">Chọn một chương</h3>
                         <div class="flex items-center gap-3">
                            <button id="save-chapter-btn" class="hidden bg-accent-blue text-white font-bold py-1 px-3 rounded-md hover:bg-accent-blue/80 text-sm transition-colors">Lưu</button>
                            <button id="focus-mode-btn" title="Chế độ Tập trung" class="text-text-secondary hover:text-white p-1 rounded-md">
                                <i id="focus-mode-icon" class="fa-solid fa-expand text-lg"></i>
                            </button>
                         </div>
                    </div>
                    <div id="story-content" contenteditable="true" class="flex-grow p-4 sm:p-6 text-base leading-relaxed focus:outline-none overflow-y-auto">
                        <p class="text-text-secondary">Sử dụng cẩm nang xây dựng thế giới bên trái để tạo nên một câu chuyện độc nhất. Khi sẵn sàng, nhấn nút <span class="text-accent-pink font-bold">+</span> để AI viết chương đầu tiên!</p>
                    </div>
                </div>
            </div>
        </main>
        
        <button id="generate-chapter-btn" class="fab fixed bottom-6 right-6 z-20 w-16 h-16 bg-accent-pink rounded-full flex items-center justify-center text-white text-3xl hover:bg-accent-pink/90 disabled:opacity-50 disabled:cursor-not-allowed">
            <i id="generate-chapter-icon" class="fa-solid fa-plus"></i>
        </button>

        <div id="toast-container" class="fixed bottom-4 right-4 z-50 w-full max-w-xs"></div>
        <div id="loading-overlay" class="fixed inset-0 bg-primary/80 backdrop-blur-sm flex items-center justify-center z-50 hidden">
            <div class="loader"></div>
        </div>

        <div id="confirmation-modal" class="fixed inset-0 bg-primary/80 backdrop-blur-sm flex items-center justify-center z-50 hidden">
            <div class="bg-secondary p-6 rounded-lg shadow-xl border border-tertiary w-full max-w-sm">
                <p id="modal-message" class="text-text-main text-center mb-6"></p>
                <div class="flex justify-around gap-4">
                    <button id="modal-cancel-btn" class="w-full bg-tertiary hover:bg-tertiary/80 py-2 px-4 rounded-md transition-colors">Hủy</button>
                    <button id="modal-confirm-btn" class="w-full bg-danger text-white py-2 px-4 rounded-md hover:bg-danger/80 transition-colors">Xác nhận</button>
                </div>
            </div>
        </div>
        
    </div>

    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, doc, getDoc, setDoc, updateDoc, deleteDoc, onSnapshot, collection, addDoc, getDocs, writeBatch, query, orderBy } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        let app, db, auth, userId = null, authReady = false;

        const TAG_DEFINITIONS = {
            genre: ['Tiên Hiệp', 'Huyền huyễn'],
            world: ['Đông phương huyền huyễn', 'Huyễn tưởng tu tiên', 'Thần thoại tu chân', 'Viễn cổ hồng hoang', 'Thời không xuyên toa', 'Chư thiên vạn giới'],
            trope: ['Kim thủ chỉ', 'Hệ thống', 'Xuyên qua', 'Cá mặn', 'Sau màn', 'Xuyên không', 'Sảng văn', 'Xây dựng thế lực']
        };
        
        const appState = {
            settings: {
                // Genre
                selectedGenres: "", selectedWorlds: "", selectedTropes: "",
                // Step 0
                step0CoreIdea: "", step0Theme: "", step0Conflict: "", step0Price: "",
                // Step 1
                step1McOrigin: "", step1McPersonality: "", step1McHobbies: "", step1McGoal: "", step1McAdvantage: "", step1McAdvantageFlaw: "",
                step1Realms: "", step1EnergySource: "", step1Breakthrough: "",
                // Step 2
                step2Talent: "", step2Methods: "", step2Challenges: "",
                step2History: "", step2Geography: "", step2WorldRules: "",
                step2Factions: "", step2Races: "", step2Economy: "",
                step2Professions: "", step2Infrastructure: "",
                // Step 3
                step3Structure: "", step3Techniques: "",
                // Step 4
                step4Mystery: "", step4Anomalies: "", step4Remnants: "",
                // Step 5
                step5Details: "", step5InternalConflicts: "", step5Perspectives: "",
                // Other settings
                pov: "third_person_limited", 
                styleTone: "",
                learnedStory: ""
            },
            chapters: [], selectedChapterId: null, currentChapterIndex: -1,
            isGenerating: false, isSaving: false, autoGenerate: false,
            tts: {
                synth: window.speechSynthesis, voices: [], vietnameseVoice: null, isSpeechInitialized: false,
                isPlaying: false, currentUtterance: null, currentParagraphIndex: 0,
                highlightedElement: null, utteranceQueue: [], playerStatus: 'stopped'
            },
        };

        let DOMElements;
        
        function showToast(message, type = 'info') {
            if (!DOMElements?.toastContainer) return;
            const toast = document.createElement('div');
            const icons = { success: 'fa-check-circle', error: 'fa-times-circle', info: 'fa-info-circle' };
            const colors = { success: 'bg-accent-green', error: 'bg-danger', info: 'bg-accent-blue' };
            toast.className = `transform translate-y-full opacity-0 transition-all duration-300 p-3 rounded-lg shadow-lg mb-2 text-sm text-white flex items-center gap-3 ${colors[type]}`;
            toast.innerHTML = `<i class="fa-solid ${icons[type]}"></i><span>${message}</span>`;
            DOMElements.toastContainer.appendChild(toast);
            setTimeout(() => toast.classList.remove('translate-y-full', 'opacity-0'), 10);
            setTimeout(() => {
                toast.classList.add('opacity-0');
                toast.addEventListener('transitionend', () => toast.remove());
            }, 3000);
        }

        function toggleLoading(show, showOverlay = true) {
            appState.isGenerating = show;
            DOMElements.loadingOverlay?.classList.toggle('hidden', !show || !showOverlay);
            updateUIStates();
        }
        
        function updateUIStates() {
            // Generate button
            const genBtn = DOMElements.generateChapterBtn;
            const genIcon = DOMElements.generateChapterIcon;
            if (genBtn) {
                genBtn.disabled = appState.isGenerating || !authReady;
                if(appState.isGenerating) {
                    genIcon.className = "fa-solid fa-spinner fa-spin";
                } else {
                    genIcon.className = "fa-solid fa-plus";
                }
            }
            // Auto-gen toggle
            if (DOMElements.autoGenToggle) DOMElements.autoGenToggle.disabled = appState.isGenerating || !authReady;
            // Saving indicator
            if (DOMElements.savingIndicator) DOMElements.savingIndicator.classList.toggle('opacity-0', !appState.isSaving);
        }

        function showConfirmationModal(message) {
            return new Promise(resolve => {
                if (!DOMElements.confirmationModal) { resolve(false); return; }
                DOMElements.modalMessage.textContent = message;
                DOMElements.confirmationModal.classList.remove('hidden');
                const confirmHandler = () => cleanup(true);
                const cancelHandler = () => cleanup(false);
                const cleanup = (result) => {
                    DOMElements.confirmationModal.classList.add('hidden');
                    DOMElements.modalConfirmBtn.removeEventListener('click', confirmHandler);
                    DOMElements.modalCancelBtn.removeEventListener('click', cancelHandler);
                    resolve(result);
                };
                DOMElements.modalConfirmBtn.addEventListener('click', confirmHandler);
                DOMElements.modalCancelBtn.addEventListener('click', cancelHandler);
            });
        }
        
        function selectChapter(chapterId) {
            appState.selectedChapterId = chapterId;
            const selectedChapter = appState.chapters.find(c => c.id === chapterId);

            if (selectedChapter) {
                appState.currentChapterIndex = appState.chapters.indexOf(selectedChapter);
                DOMElements.chapterTitleDisplay.textContent = selectedChapter.title;
                DOMElements.storyContent.innerHTML = selectedChapter.content;
                DOMElements.saveChapterBtn.classList.add('hidden');
                stopReading();
                appState.tts.currentParagraphIndex = 0;
            } else {
                appState.selectedChapterId = null;
                appState.currentChapterIndex = -1;
                DOMElements.chapterTitleDisplay.textContent = 'Chọn một chương';
                DOMElements.storyContent.innerHTML = `<p class="text-text-secondary">Sử dụng cẩm nang xây dựng thế giới bên trái để tạo nên một câu chuyện độc nhất. Khi sẵn sàng, nhấn nút <span class="text-accent-pink font-bold">+</span> để AI viết chương đầu tiên!</p>`;
                DOMElements.saveChapterBtn.classList.add('hidden');
                stopReading();
            }
            document.querySelectorAll('.chapter-item').forEach(item => {
                item.classList.toggle('selected', item.dataset.chapterId === chapterId);
            });
            DOMElements.deleteChapterBtn.disabled = !appState.selectedChapterId;
            updatePlayerUI(appState.tts.playerStatus);
        }

        function initializeSpeech() {
            const loadVoices = () => {
                appState.tts.voices = appState.tts.synth.getVoices();
                appState.tts.isSpeechInitialized = true;
                populateVoiceList();
                appState.tts.vietnameseVoice = appState.tts.voices.find(v => v.lang.startsWith('vi')) || appState.tts.voices[0];
            };
            appState.tts.synth.getVoices().length ? loadVoices() : (appState.tts.synth.onvoiceschanged = loadVoices);
        }

        function stopReading() {
            appState.tts.isPlaying = false;
            appState.tts.synth.cancel();
            if (appState.tts.highlightedElement) {
                appState.tts.highlightedElement.classList.remove('speaking-highlight');
                appState.tts.highlightedElement = null;
            }
            updatePlayerUI('stopped');
        }

        function playCurrentChapter() {
            if (!appState.selectedChapterId) { showToast("Vui lòng chọn một chương để nghe.", 'info'); return; }
            _prepareAndStartSpeakingChapter(appState.tts.currentParagraphIndex);
        }

        function _prepareAndStartSpeakingChapter(startParagraphIndex = 0) {
            appState.tts.synth.cancel();
            if (!appState.tts.isSpeechInitialized || !appState.tts.vietnameseVoice) {
                showToast('Hệ thống âm thanh chưa sẵn sàng.', 'error'); return;
            }
            const contentElement = DOMElements.storyContent;
            const paragraphs = Array.from(contentElement.children).filter(el => el.textContent.trim());
            if (paragraphs.length === 0) { showToast("Không có nội dung để đọc.", 'info'); return; }

            appState.tts.utteranceQueue = paragraphs;
            appState.tts.isPlaying = true;
            appState.tts.currentParagraphIndex = startParagraphIndex;
            updatePlayerUI('playing');
            _speakNextInQueue();
        }

        function _speakNextInQueue() {
            if (!appState.tts.isPlaying || appState.tts.currentParagraphIndex >= appState.tts.utteranceQueue.length) {
                handleAudioChapterEnd(); return;
            }
            const paragraph = appState.tts.utteranceQueue[appState.tts.currentParagraphIndex];
            const utterance = new SpeechSynthesisUtterance(paragraph.textContent);
            utterance.voice = appState.tts.vietnameseVoice;
            utterance.rate = parseFloat(DOMElements.speedControl.value);
            utterance.pitch = 1.1;
            utterance.onstart = () => {
                if (appState.tts.highlightedElement) appState.tts.highlightedElement.classList.remove('speaking-highlight');
                appState.tts.highlightedElement = paragraph;
                paragraph.classList.add('speaking-highlight');
                paragraph.scrollIntoView({ behavior: 'smooth', block: 'center' });
            };
            utterance.onend = () => {
                appState.tts.currentParagraphIndex++;
                _speakNextInQueue();
            };
            utterance.onerror = (e) => {
                if (e.error !== 'interrupted') {
                    showToast(`Lỗi phát âm thanh: ${e.error}`, 'error');
                    stopReading();
                }
            };
            appState.tts.currentUtterance = utterance;
            appState.tts.synth.speak(utterance);
        }

        function handleAudioChapterEnd() {
            stopReading();
            const nextIdx = appState.currentChapterIndex + 1;
            if (nextIdx < appState.chapters.length) {
                selectChapter(appState.chapters[nextIdx].id);
                setTimeout(() => playCurrentChapter(), 500);
            } else {
                showToast("Đã đọc xong toàn bộ truyện.", 'success');
            }
        }

        function updatePlayerUI(status) {
            appState.tts.playerStatus = status;
            const hasContent = !!appState.selectedChapterId;
            DOMElements.playIcon.classList.toggle('hidden', status === 'playing');
            DOMElements.pauseIcon.classList.toggle('hidden', status !== 'playing');
            DOMElements.statusIndicator.textContent = status === 'playing' ? "Đang đọc..." : status === 'paused' ? "Tạm dừng" : "Sẵn sàng";
            DOMElements.playPauseBtn.disabled = !hasContent;
            DOMElements.prevTrackBtn.disabled = !hasContent || appState.currentChapterIndex <= 0;
            DOMElements.nextTrackBtn.disabled = !hasContent || appState.currentChapterIndex >= appState.chapters.length - 1;
        }

        function populateVoiceList() {
            DOMElements.voiceSelect.innerHTML = '';
            appState.tts.voices.forEach(voice => {
                const option = document.createElement('option');
                option.textContent = `${voice.name} (${voice.lang})`;
                option.value = voice.name;
                if (voice.lang.startsWith('vi')) option.selected = true;
                DOMElements.voiceSelect.appendChild(option);
            });
            DOMElements.voiceSelect.disabled = appState.tts.voices.length === 0;
            DOMElements.speedControl.disabled = appState.tts.voices.length === 0;
        }

        async function initializeFirebase() {
            try {
                const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
                const firebaseConfig = JSON.parse(typeof __firebase_config !== 'undefined' ? __firebase_config : '{}');
                if (Object.keys(firebaseConfig).length === 0) throw new Error("Cấu hình Firebase trống.");
                app = initializeApp(firebaseConfig);
                db = getFirestore(app);
                auth = getAuth(app);
                onAuthStateChanged(auth, async (user) => {
                    if (user) {
                        userId = user.uid;
                        DOMElements.authStatus.textContent = "Đã kết nối";
                        DOMElements.userIdDisplay.textContent = `ID: ${userId}`;
                        authReady = true;
                        updateUIStates();
                        await loadInitialData();
                    } else {
                        const token = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;
                        token ? await signInWithCustomToken(auth, token) : await signInAnonymously(auth);
                    }
                });
            } catch (e) {
                DOMElements.authStatus.textContent = "Lỗi kết nối";
                showToast(e.message, 'error');
            }
        }

        function getUserCollectionPath(collectionName) {
            const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
            return `artifacts/${appId}/users/${userId}/${collectionName}`;
        }

        async function loadInitialData() {
            if (!authReady || !userId) return;
            try {
                const settingsRef = doc(db, getUserCollectionPath('settings'), 'user_settings');
                const settingsSnap = await getDoc(settingsRef);
                if (settingsSnap.exists()) {
                    const data = settingsSnap.data();
                    Object.keys(appState.settings).forEach(key => {
                        if (data[key] !== undefined) appState.settings[key] = data[key];
                    });
                }
                renderSettingsToUI();
            } catch (e) { 
                showToast("Lỗi tải cài đặt. Sử dụng cài đặt mặc định.", 'error'); 
                renderSettingsToUI();
            }

            const chaptersRef = collection(db, getUserCollectionPath('chapters'));
            onSnapshot(query(chaptersRef, orderBy("createdAt", "asc")), (snapshot) => {
                let chapters = [];
                snapshot.forEach(doc => chapters.push({ id: doc.id, ...doc.data() }));
                appState.chapters = chapters;
                renderChapterList();
                if (appState.selectedChapterId && !appState.chapters.some(c => c.id === appState.selectedChapterId)) {
                    selectChapter(null);
                }
            }, e => {
                showToast("Lỗi tải chương.", 'error');
                appState.chapters = [];
                renderChapterList();
            });
        }

        async function saveSettings() {
            if (!authReady || !userId || appState.isSaving) return;
            appState.isSaving = true;
            updateUIStates();
            try {
                const settingsRef = doc(db, getUserCollectionPath('settings'), 'user_settings');
                await setDoc(settingsRef, appState.settings, { merge: true });
                showToast("Đã lưu cài đặt!", 'success');
            } catch (e) { showToast("Lỗi lưu cài đặt.", 'error'); } 
            finally { 
                appState.isSaving = false;
                updateUIStates();
            }
        }

        async function addChapter(title, content) {
            if (!authReady || !userId) { showToast("Chưa xác thực.", 'error'); return null; }
            try {
                const chaptersRef = collection(db, getUserCollectionPath('chapters'));
                const newChapter = { title, content, createdAt: Date.now() };
                const docRef = await addDoc(chaptersRef, newChapter);
                showToast(`Đã tạo "${title}"!`, 'success');
                return docRef.id;
            } catch (e) { showToast("Lỗi thêm chương.", 'error'); return null; }
        }

        async function updateChapter(id, content) {
            if (!authReady || !userId) { showToast("Chưa xác thực.", 'error'); return; }
            try {
                await updateDoc(doc(db, getUserCollectionPath('chapters'), id), { content });
                showToast("Đã lưu thay đổi.", 'success');
                DOMElements.saveChapterBtn.classList.add('hidden');
            } catch (e) { showToast("Lỗi cập nhật chương.", 'error'); }
        }

        async function deleteChapter(id) {
            if (!authReady || !userId) { showToast("Chưa xác thực.", 'error'); return; }
            if (!await showConfirmationModal("Bạn có chắc chắn muốn xóa chương này?")) return;
            toggleLoading(true);
            try {
                await deleteDoc(doc(db, getUserCollectionPath('chapters'), id));
                showToast("Đã xóa chương.", 'success');
            } catch (e) { showToast("Lỗi xóa chương.", 'error'); } 
            finally { toggleLoading(false); }
        }

        async function deleteAllChapters() {
            if (!authReady || !userId) { showToast("Chưa xác thực.", 'error'); return; }
            if (!await showConfirmationModal("Xóa TẤT CẢ các chương? Hành động này không thể hoàn tác.")) return;
            toggleLoading(true);
            try {
                const chaptersRef = collection(db, getUserCollectionPath('chapters'));
                const snapshot = await getDocs(chaptersRef);
                const batch = writeBatch(db);
                snapshot.forEach(doc => batch.delete(doc.ref));
                await batch.commit();
                showToast("Đã xóa tất cả chương.", 'success');
            } catch (e) { showToast("Lỗi xóa tất cả chương.", 'error'); } 
            finally { toggleLoading(false); }
        }

        function capitalize(s) {
            if (typeof s !== 'string' || s.length === 0) return '';
            return s.charAt(0).toUpperCase() + s.slice(1);
        }

        function renderTags() {
            for (const category in TAG_DEFINITIONS) {
                const container = DOMElements[`tags${capitalize(category)}`];
                if(container) {
                    container.innerHTML = '';
                    TAG_DEFINITIONS[category].forEach(tag => {
                        const button = document.createElement('button');
                        button.className = 'tag-btn text-xs font-medium py-1 px-3 rounded-full';
                        button.textContent = tag;
                        button.dataset.category = category;
                        button.dataset.tag = tag;
                        container.appendChild(button);
                    });
                }
            }
        }

        function renderSettingsToUI() {
            for (const key in appState.settings) {
                const el = document.getElementById(`setting-${key}`);
                if (el) el.value = appState.settings[key] || '';
            }
            for (const category in TAG_DEFINITIONS) {
                const stateKey = `selected${capitalize(category)}s`;
                const selectedTags = appState.settings[stateKey] ? appState.settings[stateKey].split(', ').filter(t => t) : [];
                if(DOMElements[`display${capitalize(category)}`]) {
                    DOMElements[`display${capitalize(category)}`].value = selectedTags.join(', ');
                }
                document.querySelectorAll(`#tags-${category} .tag-btn`).forEach(btn => {
                    btn.classList.toggle('active', selectedTags.includes(btn.dataset.tag));
                });
            }
        }

        function renderChapterList() {
            DOMElements.chapterList.innerHTML = '';
            if (appState.chapters.length === 0 && !appState.isGenerating) {
                DOMElements.chapterList.innerHTML = '<p class="text-text-secondary text-center p-4">Chưa có chương nào.</p>';
            } else {
                appState.chapters.forEach((chapter, index) => {
                    const item = document.createElement('div');
                    item.className = `chapter-item p-3 rounded-lg cursor-pointer hover:bg-tertiary flex justify-between items-start`;
                    item.dataset.chapterId = chapter.id;
                    const snippet = chapter.content.replace(/<[^>]*>/g, ' ').trim();
                    item.innerHTML = `
                        <div>
                            <h4 class="font-bold text-white">${chapter.title}</h4>
                            <p class="text-text-secondary text-sm line-clamp-1">${snippet.substring(0, 50)}...</p>
                        </div>
                        <span class="text-xs font-mono text-text-secondary/50">#${index + 1}</span>
                    `;
                    DOMElements.chapterList.appendChild(item);
                });
            }
            DOMElements.deleteAllBtn.disabled = appState.chapters.length === 0;
            DOMElements.deleteChapterBtn.disabled = !appState.selectedChapterId;
        }

        function constructGeminiPrompt() {
            const { settings, chapters } = appState;
            const nextChapterNumber = chapters.length + 1;
            let prompt = `Bạn là một nhà văn chuyên nghiệp, một người kể chuyện bậc thầy. Nhiệm vụ của bạn là viết **Chương ${nextChapterNumber}** của một câu chuyện, dựa trên toàn bộ bối cảnh và các quy tắc sáng tác dưới đây.\n\n`;
            
            prompt += "### CẨM NANG THẾ GIỚI (STORY BIBLE)\n\n";

            prompt += "#### TAB 1: CƠ BẢN\n";
            if (settings.selectedGenres || settings.selectedWorlds || settings.selectedTropes) prompt += `- Thể loại - Bối cảnh - Lưu phái: ${[settings.selectedGenres, settings.selectedWorlds, settings.selectedTropes].filter(Boolean).join(' - ')}\n`;
            if (settings.step0CoreIdea) prompt += `- Ý tưởng cốt lõi: ${settings.step0CoreIdea}\n`;
            if (settings.step0Theme) prompt += `- Chủ đề & Triết lý: ${settings.step0Theme}\n`;
            if (settings.step1McOrigin) prompt += `- Nhân vật chính - Tên và Xuất thân: ${settings.step1McOrigin}\n`;
            if (settings.step1McPersonality) prompt += `- Tính cách nhân vật: ${settings.step1McPersonality}\n`;
            if (settings.step1McHobbies) prompt += `- Sở thích, hành vi đặc trưng: ${settings.step1McHobbies}\n`;
            if (settings.step1McGoal) prompt += `- Mục tiêu cuối cùng: ${settings.step1McGoal}\n`;
            if (settings.step1McAdvantage) prompt += `- Bàn tay vàng: ${settings.step1McAdvantage}\n`;
            if (settings.step1McAdvantageFlaw) prompt += `- Khuyết điểm hoặc cái giá của bàn tay vàng: ${settings.step1McAdvantageFlaw}\n`;

            prompt += "\n#### TAB 2: THẾ GIỚI\n";
            if (settings.step1Realms) prompt += `- Cảnh giới tu luyện: ${settings.step1Realms}\n`;
            if (settings.step1EnergySource) prompt += `- Nguồn năng lượng chính: ${settings.step1EnergySource}\n`;
            if (settings.step1Breakthrough) prompt += `- Điều kiện đột phá: ${settings.step1Breakthrough}\n`;
            if (settings.step2Talent) prompt += `- Thiên phú và thể chất: ${settings.step2Talent}\n`;
            if (settings.step2Methods) prompt += `- Công pháp, kỹ năng, pháp bảo: ${settings.step2Methods}\n`;
            if (settings.step2Challenges) prompt += `- Trở ngại tu luyện: ${settings.step2Challenges}\n`;
            if (settings.step2History) prompt += `- Lịch sử - Truyền thuyết nổi bật: ${settings.step2History}\n`;
            if (settings.step2Geography) prompt += `- Địa lý – Vị diện – Không gian: ${settings.step2Geography}\n`;
            if (settings.step2WorldRules) prompt += `- Quy luật thế giới / Thiên đạo: ${settings.step2WorldRules}\n`;
            if (settings.step2Factions) prompt += `- Thế lực và tổ chức: ${settings.step2Factions}\n`;
            if (settings.step2Races) prompt += `- Chủng tộc và sinh vật: ${settings.step2Races}\n`;
            if (settings.step2Economy) prompt += `- Kinh tế và tiền tệ: ${settings.step2Economy}\n`;
            if (settings.step2Professions) prompt += `- Nghề nghiệp phụ trợ: ${settings.step2Professions}\n`;
            if (settings.step2Infrastructure) prompt += `- Hạ tầng xã hội: ${settings.step2Infrastructure}\n`;
            
            prompt += "\n#### TAB 3: CỐT TRUYỆN\n";
            if (settings.step3Structure) prompt += `- Cấu trúc cốt truyện: ${settings.step3Structure}\n`;
            if (settings.step3Techniques) prompt += `- Kỹ thuật gây nghiện: ${settings.step3Techniques}\n`;
            if (settings.styleTone) prompt += `- Phong cách và tông màu: ${settings.styleTone}\n`;
            if (settings.pov) prompt += `- Góc nhìn kể chuyện: ${DOMElements.settingPov.options[DOMElements.settingPov.selectedIndex].text}\n`;

            prompt += "\n#### TAB 4: NÂNG CAO\n";
            if (settings.step0Conflict) prompt += `- Xung đột nền tảng: ${settings.step0Conflict}\n`;
            if (settings.step0Price) prompt += `- Cái giá phải trả: ${settings.step0Price}\n`;
            if (settings.step4Mystery) prompt += `- Bí ẩn và yếu tố vĩ mô: ${settings.step4Mystery}\n`;
            if (settings.step4Anomalies) prompt += `- Dị tượng – Quy tắc lạ: ${settings.step4Anomalies}\n`;
            if (settings.step4Remnants) prompt += `- Tàn tích – Đồ cổ xưa: ${settings.step4Remnants}\n`;
            if (settings.step5Details) prompt += `- Chi tiết đời thường để tạo chiều sâu: ${settings.step5Details}\n`;
            if (settings.step5InternalConflicts) prompt += `- Tình huống "Nếu... thì sao?": ${settings.step5InternalConflicts}\n`;
            if (settings.step5Perspectives) prompt += `- Góc nhìn đa chiều: ${settings.step5Perspectives}\n`;

            if (settings.learnedStory) {
                prompt += `\n### VĂN PHONG THAM CHIẾU (AI PHẢI HỌC THEO VĂN PHONG NÀY)\n${settings.learnedStory}\n`;
            }

            prompt += `\n### BỘ QUY TẮC SÁNG TÁC BẮT BUỘC (AI PHẢI TUÂN THỦ):\n`;
            prompt += "1. **KHÔNG GIỚI THIỆU:** Bắt đầu ngay lập tức bằng hành động, đối thoại, hoặc miêu tả của chương. TUYỆT ĐỐI không viết những câu như 'Trong chương này...' hoặc 'Tiếp nối chương trước...'.\n";
            prompt += `2. **NHẬP VAI NHÂN VẬT:** Mọi hành động, suy nghĩ, và lời nói của nhân vật chính phải tuyệt đối tuân thủ theo 'Tính cách nhân vật' đã được mô tả.\n`;
            prompt += "3. **MỤC TIÊU CHƯƠNG:** Mỗi chương phải có 1 mục tiêu rõ ràng (gặp nhân vật mới, mở ra bí ẩn, thất bại, đột phá...). Cấm viết chương “trôi nổi không mục đích”.\n";
            prompt += "4. **MÓC NỐI TÌNH TIẾT:** Nhiệm vụ quan trọng nhất là viết tiếp ngay sau đoạn 'KẾT THÚC CHƯƠNG TRƯỚC'.\n\n";

            if (chapters.length > 0) {
                const recentChapter = chapters[chapters.length - 1];
                const snippet = recentChapter.content.replace(/<[^>]*>/g, ' ').trim();
                prompt += `### KẾT THÚC CHƯƠNG TRƯỚC (${recentChapter.title}):\n${snippet.slice(-500)}\n\n`;
            }

            prompt += `### YÊU CẦU HIỆN TẠI:\nViết **Chương ${nextChapterNumber}**, tuân thủ nghiêm ngặt tất cả các quy tắc đã nêu.`;
            
            return prompt;
        }

        function showChapterSkeleton() {
            const skeleton = document.createElement('div');
            skeleton.id = "chapter-skeleton";
            skeleton.className = "space-y-3 p-3";
            skeleton.innerHTML = `
                <div class="h-4 w-3/4 skeleton-loader"></div>
                <div class="h-3 w-full skeleton-loader"></div>
                <div class="h-3 w-5/6 skeleton-loader"></div>
            `;
            DOMElements.chapterList.prepend(skeleton);
        }

        async function generateChapter() {
            if (appState.isGenerating || !userId) return;
            toggleLoading(true, false);
            showChapterSkeleton();
            try {
                const prompt = constructGeminiPrompt();
                const payload = { contents: [{ role: "user", parts: [{ text: prompt }] }] };
                const apiKey = "";
                const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;
                const response = await fetch(apiUrl, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) });
                const result = await response.json();

                if (result.candidates?.[0]?.content?.parts?.[0]?.text) {
                    const newContent = result.candidates[0].content.parts[0].text.trim().split('\n').filter(p => p.trim()).map(p => `<p>${p}</p>`).join('');
                    const newId = await addChapter(`Chương ${appState.chapters.length + 1}`, newContent);
                    if (newId && !appState.autoGenerate) {
                        selectChapter(newId);
                    }
                } else {
                    let errorMessage = "Phản hồi từ AI không hợp lệ.";
                    if(result.promptFeedback && result.promptFeedback.blockReason){
                       errorMessage += ` Lý do: ${result.promptFeedback.blockReason}`;
                    }
                    throw new Error(errorMessage);
                }
            } catch (e) {
                showToast(e.message, 'error');
                appState.autoGenerate = false; 
                updateAutoGenUI();
            } finally {
                document.getElementById('chapter-skeleton')?.remove();
                toggleLoading(false);
                if (appState.autoGenerate) setTimeout(generateChapter, 5000);
            }
        }
        
        function updateAutoGenUI() {
            DOMElements.autoGenToggle.setAttribute('aria-checked', appState.autoGenerate);
            const span = DOMElements.autoGenToggle.querySelector('span');
            span.style.transform = appState.autoGenerate ? 'translateX(1.25rem)' : 'translateX(0.25rem)';
            DOMElements.autoGenToggle.classList.toggle('bg-accent-pink', appState.autoGenerate);
            DOMElements.autoGenToggle.classList.toggle('bg-tertiary', !appState.autoGenerate);
            DOMElements.continuousGenNotification.classList.toggle('hidden', !appState.autoGenerate);
        }

        function toggleFocusMode() {
            const container = DOMElements.appContainer;
            const icon = DOMElements.focusModeIcon;
            container.classList.toggle('focus-mode');
            
            const isInFocusMode = container.classList.contains('focus-mode');
            icon.classList.toggle('fa-expand', !isInFocusMode);
            icon.classList.toggle('fa-compress', isInFocusMode);
        }

        function setupTabs() {
            const tabs = DOMElements.settingsTabs.querySelectorAll('.tab-button');
            const contents = DOMElements.settingsTabContent.querySelectorAll('.tab-content');

            const switchTab = (tabButton) => {
                const tabName = tabButton.dataset.tab;
                
                tabs.forEach(tab => tab.classList.remove('active'));
                tabButton.classList.add('active');

                contents.forEach(content => {
                    content.classList.toggle('active', content.id === `tab-content-${tabName}`);
                });
            };

            tabs.forEach(tab => {
                tab.addEventListener('click', () => switchTab(tab));
            });

            switchTab(tabs[0]);
        }

        document.addEventListener('DOMContentLoaded', () => {
            DOMElements = {};
            document.querySelectorAll('[id]').forEach(el => {
                const camelCaseId = el.id.replace(/-([a-z])/g, g => g[1].toUpperCase());
                DOMElements[camelCaseId] = el;
            });
            
            renderTags();
            initializeFirebase();
            initializeSpeech();
            setupTabs();

            const toggleSidebar = (show) => {
                DOMElements.sidebar.classList.toggle('-translate-x-full', !show);
                DOMElements.sidebarOverlay.classList.toggle('opacity-0', !show);
                DOMElements.sidebarOverlay.classList.toggle('pointer-events-none', !show);
            };

            DOMElements.menuToggleBtn.addEventListener('click', () => toggleSidebar(true));
            DOMElements.closeMenuBtn.addEventListener('click', () => toggleSidebar(false));
            DOMElements.sidebarOverlay.addEventListener('click', () => toggleSidebar(false));

            let saveSettingsTimeout;
            DOMElements.settingsTabContent.addEventListener('input', (e) => {
                if(e.target.matches('textarea[id^="setting-"], select[id^="setting-"]')) {
                    const key = e.target.id.replace('setting-', '');
                    if(appState.settings.hasOwnProperty(key)) {
                        appState.settings[key] = e.target.value;
                        clearTimeout(saveSettingsTimeout);
                        saveSettingsTimeout = setTimeout(saveSettings, 1500);
                    }
                }
            });

            DOMElements.settingsTabContent.addEventListener('click', (e) => {
                if (e.target.classList.contains('tag-btn')) {
                    const { category, tag } = e.target.dataset;
                    e.target.classList.toggle('active');
                    const stateKey = `selected${capitalize(category)}s`;
                    const currentTags = appState.settings[stateKey] ? appState.settings[stateKey].split(', ').filter(t=>t) : [];
                    const tagIndex = currentTags.indexOf(tag);
                    if (tagIndex > -1) currentTags.splice(tagIndex, 1);
                    else currentTags.push(tag);
                    appState.settings[stateKey] = currentTags.join(', ');
                    DOMElements[`display${capitalize(category)}`].value = appState.settings[stateKey];
                    clearTimeout(saveSettingsTimeout);
                    saveSettingsTimeout = setTimeout(saveSettings, 1500);
                }
            });

            DOMElements.uploadLearnedStoryBtn.addEventListener('click', () => DOMElements.learnedStoryFileInput.click());

            DOMElements.learnedStoryFileInput.addEventListener('change', (e) => {
                const file = e.target.files[0];
                if (!file || !file.type.match('text.*')) {
                    if(file) showToast('Vui lòng chọn một file .txt', 'error');
                    return;
                }
                const reader = new FileReader();
                reader.onload = (event) => {
                    DOMElements.settingLearnedStory.value = event.target.result;
                    DOMElements.settingLearnedStory.dispatchEvent(new Event('input', { bubbles: true }));
                };
                reader.onerror = () => showToast('Lỗi khi đọc file.', 'error');
                reader.readAsText(file);
                e.target.value = '';
            });

            DOMElements.generateChapterBtn.addEventListener('click', generateChapter);
            DOMElements.autoGenToggle.addEventListener('click', () => {
                if (DOMElements.autoGenToggle.disabled) return;
                appState.autoGenerate = !appState.autoGenerate;
                updateAutoGenUI();
                if (appState.autoGenerate && !appState.isGenerating) generateChapter();
            });

            DOMElements.chapterList.addEventListener('click', (e) => {
                const item = e.target.closest('.chapter-item');
                if (item) selectChapter(item.dataset.chapterId);
            });

            DOMElements.storyContent.addEventListener('input', () => {
                if (appState.selectedChapterId) DOMElements.saveChapterBtn.classList.remove('hidden');
            });

            DOMElements.saveChapterBtn.addEventListener('click', () => {
                if (appState.selectedChapterId) updateChapter(appState.selectedChapterId, DOMElements.storyContent.innerHTML);
            });

            DOMElements.deleteChapterBtn.addEventListener('click', () => {
                if (appState.selectedChapterId) deleteChapter(appState.selectedChapterId);
            });
            DOMElements.deleteAllBtn.addEventListener('click', deleteAllChapters);
            
            DOMElements.playPauseBtn.addEventListener('click', () => {
                if (!appState.selectedChapterId) return;
                if (appState.tts.playerStatus === 'playing') {
                    appState.tts.synth.pause();
                    updatePlayerUI('paused');
                } else if (appState.tts.playerStatus === 'paused') {
                    appState.tts.synth.resume();
                    updatePlayerUI('playing');
                } else {
                    playCurrentChapter();
                }
            });
            DOMElements.prevTrackBtn.addEventListener('click', () => {
                const prevIdx = appState.currentChapterIndex - 1;
                if (prevIdx >= 0) {
                    selectChapter(appState.chapters[prevIdx].id);
                    setTimeout(() => playCurrentChapter(), 50);
                }
            });
            DOMElements.nextTrackBtn.addEventListener('click', () => {
                const nextIdx = appState.currentChapterIndex + 1;
                if (nextIdx < appState.chapters.length) {
                    selectChapter(appState.chapters[nextIdx].id);
                    setTimeout(() => playCurrentChapter(), 50);
                }
            });
            DOMElements.voiceSelect.addEventListener('change', (e) => {
                appState.tts.vietnameseVoice = appState.tts.voices.find(v => v.name === e.target.value);
                if (appState.tts.playerStatus !== 'stopped') {
                    const wasPaused = appState.tts.playerStatus === 'paused';
                    const currentP = appState.tts.currentParagraphIndex;
                    stopReading();
                    setTimeout(() => {
                        _prepareAndStartSpeakingChapter(currentP);
                        if (wasPaused) setTimeout(() => { appState.tts.synth.pause(); updatePlayerUI('paused'); }, 100);
                    }, 200);
                }
            });
            
            DOMElements.speedControl.addEventListener('input', (e) => {
                const speed = parseFloat(e.target.value);
                DOMElements.speedLabel.textContent = `${speed.toFixed(1)}x`;
                if (appState.tts.playerStatus !== 'stopped') {
                    const wasPaused = appState.tts.playerStatus === 'paused';
                    const currentP = appState.tts.currentParagraphIndex;
                    stopReading();
                    setTimeout(() => {
                        _prepareAndStartSpeakingChapter(currentP);
                        if (wasPaused) setTimeout(() => { appState.tts.synth.pause(); updatePlayerUI('paused'); }, 100);
                    }, 200);
                }
            });
            
            DOMElements.focusModeBtn.addEventListener('click', toggleFocusMode);

            DOMElements.exportJsonBtn.addEventListener('click', async () => {
                if (!authReady || !userId) return;
                toggleLoading(true);
                try {
                    const dataToExport = { settings: appState.settings, chapters: appState.chapters };
                    const blob = new Blob([JSON.stringify(dataToExport, null, 2)], { type: 'application/json' });
                    const url = URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = 'ai_story_workshop_data.json';
                    a.click();
                    URL.revokeObjectURL(url);
                    showToast("Đã xuất dữ liệu!", 'success');
                } catch (e) { showToast("Lỗi xuất dữ liệu.", 'error'); }
                finally { toggleLoading(false); }
            });

            DOMElements.importJsonBtn.addEventListener('click', () => {
                const input = document.createElement('input');
                input.type = 'file';
                input.accept = 'application/json';
                input.onchange = async (e) => {
                    const file = e.target.files[0];
                    if (!file) return;
                    if (!await showConfirmationModal("Nhập file sẽ ghi đè lên tất cả cài đặt và chương hiện có. Tiếp tục?")) return;
                    toggleLoading(true, true);
                    try {
                        const text = await file.text();
                        const data = JSON.parse(text);
                        if (data.settings && Array.isArray(data.chapters)) {
                           
                            const settingsRef = doc(db, getUserCollectionPath('settings'), 'user_settings');
                            await setDoc(settingsRef, data.settings);

                            const chaptersRef = collection(db, getUserCollectionPath('chapters'));
                            const existingChaptersSnap = await getDocs(chaptersRef);
                            const batch = writeBatch(db);
                            existingChaptersSnap.forEach(doc => batch.delete(doc.ref));
                            
                            data.chapters.forEach(chapter => {
                                const newChapterRef = doc(chaptersRef);
                                const newChapterData = { ...chapter, createdAt: chapter.createdAt || Date.now() };
                                batch.set(newChapterRef, newChapterData);
                            });
                            
                            await batch.commit();
                            await loadInitialData();
                            showToast("Nhập dữ liệu thành công!", 'success');
                        } else { throw new Error("Tệp JSON không hợp lệ."); }
                    } catch (err) { showToast(`Lỗi nhập dữ liệu: ${err.message}`, 'error'); }
                    finally { toggleLoading(false, true); }
                };
                input.click();
            });
        });
    </script>
</body>
</html>
